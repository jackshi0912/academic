package cse110_group_13.ucsdconnect;

import android.content.Context;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.firebase.client.DataSnapshot;
import com.firebase.client.Firebase;
import com.firebase.client.FirebaseError;
import com.firebase.client.ValueEventListener;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/*
 * Class Notes: Based on boilerplate code auto-generated by Android Studio.
 *
 * Description: This class creates a reusable fragment for displaying a list of events.
 * See EventFilter to control which events are displayed.
 *
 * Public Methods: ItemFragment()
 *                 newInstance(EventFilter filter)
 *                 onCreate(Bundle savedInstanceState)
 *                 onCreateView(LayoutInflater inflater, ViewGroup container,
 *                              Bundle savedInstanceState)
 *                 onAttach(Context context)
 *                 onDetach()
 *                 onStart()
 *                 onStop()
 *                 onSearchQuery(String query)
 */

public class ItemFragment extends Fragment implements SearchListener {
    private static String ARG_FILTER = "filter";

    private EventFilter mFilter;
    private MyItemRecyclerViewAdapter mAdapter;
    private Firebase mRef;
    private ValueEventListener mRefListener;

    private OnListFragmentInteractionListener mListener;

    public static MyItemRecyclerViewAdapter eventListContainer;

    public ItemFragment() {
    }

    public static ItemFragment newInstance(EventFilter filter) {
        final ItemFragment fragment = new ItemFragment();
        final Bundle args = new Bundle();
        args.putSerializable(ARG_FILTER, filter);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        final Bundle args = getArguments();
        if (args != null) {
            mFilter = (EventFilter) args.getSerializable(ARG_FILTER);
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_item_list, container, false);

        if (view instanceof RecyclerView) {
            Context context = view.getContext();
            final RecyclerView recyclerView = (RecyclerView) view;
            recyclerView.setLayoutManager(new LinearLayoutManager(context));
            mAdapter = new MyItemRecyclerViewAdapter(mListener);
            recyclerView.setAdapter(mAdapter);
        }

        return view;
    }

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        if (context instanceof MenuActivity) {
            ((MenuActivity) context).searchListener = this;
            mListener = (OnListFragmentInteractionListener) context;
        } else {
            throw new RuntimeException(context.toString()
                    + " must be MenuActivity");
        }
    }

    @Override
    public void onDetach() {
        super.onDetach();
        mListener = null;
    }

    @Override
    public void onStart() {
        super.onStart();
        mRef =new Firebase("https://ucsdconnect-25d00.firebaseio.com/Events/");
        mRefListener = new ValueEventListener() {
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                final List<Event> events = new ArrayList<Event>();
                for (DataSnapshot eventSnapshot : dataSnapshot.getChildren()) {
                    final Event event = new Event(eventSnapshot.getValue(Map.class));
                    if (mFilter.filterEvent(event)) {
                        events.add(event);
                    }
                }
                mAdapter.setEvents(events);
            }

            @Override
            public void onCancelled(FirebaseError firebaseError) {}
        };
        mRef.addValueEventListener(mRefListener);
    }

    @Override
    public void onStop() {
        super.onStop();
        if (mRef != null) {
            mRef.removeEventListener(mRefListener);
            mRef = null;
            mRefListener = null;
        }
    }

    @Override
    public void onSearchQuery(String query) {
        mAdapter.setQuery(query);
    }

    public interface OnListFragmentInteractionListener {
        void onEventInfoRequested(Event event);
    }
}
