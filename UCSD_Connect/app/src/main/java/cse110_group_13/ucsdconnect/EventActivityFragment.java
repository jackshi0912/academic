package cse110_group_13.ucsdconnect;

import android.content.Context;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;

import com.firebase.client.Firebase;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.messaging.FirebaseMessaging;

/*
 * Class Notes: Based on boilerplate code auto-generated by Android Studio.
 *
 * Description: This class creates a fragment in which you can view the event details of a selected
 * event.
 *
 * Public Methods: newInstance(Event event)
 *                 onCreate(Bundle savedInstanceState)
 *                 onCreateView(LayoutInflater inflater, ViewGroup container,
 *                              Bundle savedInstanceState)
 *                 onButtonPressed(Uri uri)
 *                 onAttach(Context context)
 *                 onDetach()
 *
 */

public class EventActivityFragment extends Fragment {
    private static final String ARG_EVENT = "event";
    private static String eventName = "Event1"; // will be changed to event selected

    private Event mEvent;

    private OnFragmentInteractionListener mListener;

    private Button attendEvent;
    private Button blockEvent;

    private Firebase mRef;

    private static boolean blocked = false;
    private static boolean planned = false;

    public EventActivityFragment() {
        // Required empty public constructor
    }

    public static EventActivityFragment newInstance(Event event) {
        EventActivityFragment fragment = new EventActivityFragment();
        Bundle args = new Bundle();
        args.putSerializable(ARG_EVENT, event);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
            mEvent = (Event) getArguments().getSerializable(ARG_EVENT);
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        final View view = inflater.inflate(R.layout.fragment_event, container, false);
        ((InfoRow) view.findViewById(R.id.event_name)).setContentText(mEvent.name);
        ((InfoRow) view.findViewById(R.id.event_date)).setContentText(mEvent.date);
        ((InfoRow) view.findViewById(R.id.event_time)).setContentText(mEvent.time);
        ((InfoRow) view.findViewById(R.id.event_location)).setContentText(mEvent.location);
        ((InfoRow) view.findViewById(R.id.event_description)).setContentText(mEvent.description);
        ((InfoRow) view.findViewById(R.id.event_category)).setContentText(mEvent.category);

        attendEvent = (Button) view.findViewById(R.id.attend);
        blockEvent = (Button) view.findViewById(R.id.block);

        attendEvent.setText(User.currentUser.isEventPlanned(mEvent) ? "Un-plan To Attend" : "Plan To Attend");
        blockEvent.setText(User.currentUser.isEventBlocked(mEvent) ? "Unhide Event" : "Hide Event");

        mRef = new Firebase("https://ucsdconnect-25d00.firebaseio.com/");
        final String userId = FirebaseAuth.getInstance().getCurrentUser().getUid();

        attendEvent.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                planned = User.currentUser.isEventPlanned(mEvent);
                Log.d("[EventActivityFragment]", "Event is planned: " + planned);

                // add event to attend and firebase
                if (!planned) {
                    Log.d("[EventActivityFragment]", "Adding event");
                    User.currentUser.addAttend(mEvent);
                    attendEvent.setText("Un-plan To Attend");
                    FirebaseMessaging.getInstance().subscribeToTopic(mEvent.name.replaceAll("\\s+",""));
                }

                else {
                    Log.d("[EventActivityFragment", "Removing planned event");
                    attendEvent.setText("Plan To Attend");
                    User.currentUser.removeAttend(mEvent);
                    FirebaseMessaging.getInstance().unsubscribeFromTopic(mEvent.name.replaceAll("\\s+",""));
                }

                planned = !planned;
            }

        });

        blockEvent.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                blocked = User.currentUser.isEventBlocked(mEvent);

                // add event to blocked and firebase
                if (!blocked) {
                    User.currentUser.addBlocked(mEvent);
                    blockEvent.setText("Unhide Event");
                    FirebaseMessaging.getInstance().unsubscribeFromTopic(mEvent.name.replaceAll("\\s+",""));
                }

                else {
                    User.currentUser.removeBlocked(mEvent);
                    blockEvent.setText("Hide Event");
                }

                blocked = !blocked;
            }


        });

        return view;
    }

    public void onButtonPressed(Uri uri) {
        if (mListener != null) {
            mListener.onFragmentInteraction(uri);
        }
    }

    @Override
    public void onAttach(Context context) {
        super.onAttach(context);
        if (context instanceof OnFragmentInteractionListener) {
            mListener = (OnFragmentInteractionListener) context;
        } else {
            throw new RuntimeException(context.toString()
                    + " must implement OnFragmentInteractionListener");
        }
    }

    @Override
    public void onDetach() {
        super.onDetach();
        mListener = null;
    }

    public interface OnFragmentInteractionListener {
        void onFragmentInteraction(Uri uri);
    }
}
